trigger:
  branches:
    include: [main, develop, "release-*" ]
  paths:
    exclude: [README.md, LICENSE.md, .gitignore]
  tags:
    include: ["v*"]

# PR always trigger build

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

jobs:

##############################
# build tools
- job: Build_tools

  pool:
    vmImage: 'windows-latest'

  variables:
    DOTNET_NOLOGO: true
    buildPlatform: 'x64'
    buildConfiguration: 'Release'
    solution: 'nanoFramework.Tools.Hex2Dfu.sln'
    toolName: 'HEX2DFU utility'

  steps:

  # need this here in order to persist GitHub credentials
  - checkout: self
    persistCredentials: true

  - script: |
      git config --global user.email "nanoframework@outlook.com"
      git config --global user.name "nfbot"
    displayName: Setup git identity

  - template: azure-pipelines-templates/install-nuget.yml@templates

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
      verbosityRestore: quiet
  
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 6.x

  - task: DotNetCoreCLI@2  
    condition: ne(variables['system.pullrequest.isfork'], true)
    displayName: Install NBGV tool
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
  
  - script: nbgv cloud -a -c
    condition: ne(variables['system.pullrequest.isfork'], true)
    displayName: Set build number

  - task: PowerShell@2
    displayName: 'dotnet build Linux version'
    condition: succeeded()
    inputs:
      targetType: 'inline'
      script: |
        dotnet publish $(Build.SourcesDirectory)\source\hex2dfu.csproj -r linux-x64 -p:PublishSingleFile=true --self-contained true -c Release

  - task: PowerShell@2
    displayName: 'dotnet build Windows version'
    condition: succeeded()
    inputs:
      targetType: 'inline'
      script: |
        dotnet publish $(Build.SourcesDirectory)\source\hex2dfu.csproj -r win-x64 -p:PublishSingleFile=true --self-contained false -c Release
  
  - task: CopyFiles@2
    displayName: Collecting deployable artifacts
    condition: succeeded()
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\source'
      Contents: |
        **\linux-x64\publish\*hex2dfu
        **\win-x64\publish\*hex2*.exe
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      msbuildArgs: '/p:PublicRelease=true'
      configuration: '$(buildConfiguration)'
    
  - task: VisualStudioTestPlatformInstaller@1
    condition: succeeded()
    displayName: 'Visual Studio Test Platform Installer'
    inputs:
      versionSelector: latestStable

  - task: VSTest@2
    condition: succeeded()
    displayName: 'Running tests'
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\$(BuildConfiguration)\**\*test*.dll
        !**\obj\**
        !**\bin\**\ref\**
        !**\*TestAdapter.dll
        !**\*testhost.dll
        !**\*TestPlatform*.dll
        !**\xunit.runner.visualstudio.testadapter.dll
        !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
      searchFolder: '$(System.DefaultWorkingDirectory)'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      diagnosticsEnabled: true
      vsTestVersion: toolsInstaller
      codeCoverageEnabled: true

  # publish artifacts (only possible if this is not a PR originated on a fork)
  - task: PublishBuildArtifacts@1
    displayName: Publish deployables artifacts
    condition: >-
      and(
        succeeded(),
        ne(variables['system.pullrequest.isfork'], true)
      )
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: deployables
      ArtifactType: Container

  # create or update GitHub release
  - task: GithubRelease@1
    inputs:
      gitHubConnection: 'github.com_nano-$(System.TeamProject)'
      action: create
      isDraft: false
      tagSource: userSpecifiedTag
      tag: v$(GitBuildVersionSimple)
      title: '.NET nanoFramework hex2dfu v$(GitBuildVersionSimple)'
      assets: '$(Build.ArtifactStagingDirectory)/*'
      addChangeLog: true
      changeLogLabels: |
        [
          { "label" : "Type: bug", "displayName" : "Bugs fixed", "state" : "closed" },
          { "label" : "Type: enhancement", "displayName" : "Enhancements and new features", "state" : "closed" },
          { "label" : "Breaking-Change", "displayName" : "Breaking Changes", "state" : "closed" }
          { "label" : "Type: dependencies", "displayName" : "Dependencies updated", "state" : "closed" },
          { "label" : "Type: documentation", "displayName" : "Documentation", "state" : "closed" }
        ]      
      condition: >-
        and(
          succeeded(),
          eq(variables['System.PullRequest.PullRequestId'], ''),
          not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
        )
    displayName: Create/Update GitHub release

##################################
# report build failure to Discord
- job: Report_Build_Failure

  dependsOn:
  - Build_tools
  condition: failed('Build_tools')

  pool:
    vmImage: 'windows-latest'

  steps:

  - checkout: self
    fetchDepth: 1

  # step from template @ nf-tools repo
  # report error
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
