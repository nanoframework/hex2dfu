trigger:
  branches:
    include: [master, develop, "release-*" ]
  paths:
    exclude: ["*.md", .gitignore]
  tags:
    include: ["v*"]

# PR always trigger build

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

jobs:

##############################
# build tools
- job: Build_tools

  pool:
    vmImage: 'windows-2019'

  variables:
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    solution: 'nanoFramework.Tools.Hex2Dfu.sln'
    toolName: 'HEX2DFU utility'

  steps:

  # need this here in order to persist GitHub credentials
  - checkout: self
    persistCredentials: true

  - script: |
      git config --global user.email "nanoframework@outlook.com"
      git config --global user.name "nfbot"
    displayName: Setup git identity

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
      verbosityRestore: quiet

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 5.x
       
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build Linux version'
    inputs:
      command: 'publish'
      publishWebProjects: 'false'
      projects: '**/hex2dfu.csproj'
      arguments: '-p:PublishProfile=linux-build.pubxml -p:PlatformTarget=x64 -c Release'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build Windows version'
    inputs:
      command: 'publish'
      publishWebProjects: 'false'
      projects: '**/hex2dfu.csproj'
      arguments: '-p:PublishProfile=win64-build.pubxml -p:PlatformTarget=x64 -c Release'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      msbuildArgs: '/p:PublicRelease=true'
      configuration: '$(buildConfiguration)'
  
  - task: VisualStudioTestPlatformInstaller@1
    condition: succeeded()
    displayName: 'Visual Studio Test Platform Installer'
    inputs:
      versionSelector: latestStable

  - task: VSTest@2
    condition: succeeded()
    displayName: 'Running tests'
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\bin\$(BuildConfiguration)\**\*test*.dll
        !**\obj\**
        !**\bin\**\ref\**
        !**\*TestAdapter.dll
        !**\*testhost.dll
        !**\*TestPlatform*.dll
        !**\xunit.runner.visualstudio.testadapter.dll
        !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
      searchFolder: '$(System.DefaultWorkingDirectory)'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      diagnosticsEnabled: true
      vsTestVersion: toolsInstaller
      codeCoverageEnabled: true
    
  - task: CopyFiles@1
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      Contents: |
        **\publish\win64\hex2dfu*
        **\publish\linux\hex2dfu*.exe
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
    condition: succeeded()
    displayName: Collecting deployable artifacts

  # publish artifacts (only possible if this is not a PR originated on a fork)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: deployables
      ArtifactType: Container
    condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
    displayName: Publish deployables artifacts

  # create or update GitHub release
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoFramework'
      githubOwner: 'nanoframework'
      githubRepositoryName: 'hex2dfu'
      githubTag: v$(GitBuildVersionSimple)
      githubReleaseTitle: 'nanoFramework hex2dfu v$(GitBuildVersionSimple)'
      githubReleaseNotes: 'add description here'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: true
      githubReleasePrerelease: false
      githubReuseDraftOnly: true
      githubReuseRelease: true
      githubEditRelease: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.exe'
    condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ) )
    displayName: Create/Update GitHub release

##################################
# report build failure to Discord
- job: Report_Build_Failure
  dependsOn:
  - Build_tools
  condition: failed('Build_tools')

  pool:
    vmImage: 'VS2017-Win2016'

  steps:

  - checkout: self
    fetchDepth: 1

  # step from template @ nf-tools repo
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
